[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "navigate-la-28-server"
version = "1.0.0"
description = "Geospatial navigation API for LA 2028 Olympics tourism"
authors = [
    {name = "Navigate LA 28 Team", email = "team@navigate-la28.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]
keywords = ["fastapi", "geospatial", "navigation", "olympics", "la2028"]

[project.optional-dependencies]
dev = [
    "black[jupyter]==24.10.0",
    "isort==5.13.2",
    "flake8==7.1.1",
    "flake8-docstrings==1.7.0",
    "flake8-import-order==0.18.2",
    "flake8-annotations==3.1.1",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
    "bandit==1.8.0",
    "safety==3.2.11",
    "pytest-asyncio==0.25.0",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "httpx==0.28.1",
    "factory-boy==3.3.1",
    "faker==33.1.0",
]
test = [
    "pytest==8.3.4",
    "pytest-asyncio==0.25.0",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "httpx==0.28.1",
    "factory-boy==3.3.1",
    "faker==33.1.0",
]
lint = [
    "black==24.10.0",
    "isort==5.13.2",
    "flake8==7.1.1",
    "mypy==1.13.0",
    "bandit==1.8.0",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]
known_first_party = ["app", "config", "models", "routes", "services", "schemas"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "leaflet.*",
    "yarl.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "scripts/*",
    "*/migrations/*",
    "venv/*",
    ".venv/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (for development)

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/*_test.py"] 