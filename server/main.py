# server/main.py

# Import necessary modules and libraries
from fastapi import FastAPI  # FastAPI framework for building APIs
from dotenv import load_dotenv  # For loading environment variables from a .env file
import os  # For interacting with the operating system
import logging  # For configuring and handling logging

# Import custom middleware and routers
# Custom CORS middleware setup
from middleware.cors_config import add_cors_middleware
from routes import api_router  # Main API router for the application
from fastapi.middleware.cors import CORSMiddleware  # Built-in CORS middleware
from config.settings import get_settings  # Import settings

# Configure logging for SQLAlchemy
# Logs all SQL statements generated by SQLAlchemy for debugging purposes
logging.basicConfig()
logging.getLogger("sqlalchemy.engine").setLevel(logging.INFO)

# Load environment variables from a .env file
load_dotenv()

# Get application settings
settings = get_settings()

# Initialize the FastAPI application
app = FastAPI(
    title=settings.app_name,  # Title of the API
    description="Geospatial navigation API for LA 2028 Olympics tourism.",  # API description
    version=settings.app_version,  # Version of the API
    docs_url=settings.docs_url,  # Path for Swagger UI documentation
    redoc_url=settings.redoc_url,  # Path for ReDoc documentation
    openapi_url="/openapi.json",  # Path for OpenAPI schema
    debug=settings.debug,  # Enable debug mode based on settings
)

# Add built-in CORS middleware to the FastAPI app
# This is configured to allow origins from settings
app.add_middleware(
    CORSMiddleware,
    # Allow origins from settings
    allow_origins=settings.allowed_origins,
    allow_credentials=False,  # Disable credentials for CORS
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

# Add custom CORS middleware from the application
# This function is defined in `middleware/cors_config.py`
add_cors_middleware(app)

# Include the main API router
# All routes defined in `routes` will be available under the settings prefix
app.include_router(api_router, prefix=settings.api_prefix, tags=["API"])


@app.get("/")
async def read_root():
    """
    Root endpoint to verify the server is running.

    Returns:
        A JSON response with a welcome message.
    """
    return {"message": "Welcome to Navigate LA 2028 API!"}


@app.get("/health")
async def health_check():
    """
    Health check endpoint for monitoring and load balancers.

    Returns:
        A JSON response indicating the service health status.
    """
    return {
        "status": "healthy",
        "service": "Navigate LA 2028 API",
        "version": "1.0.0"
    }


@app.get("/url-list")
def get_all_urls():
    """
    Endpoint to list all registered URLs in the application.

    Returns:
        A JSON list of all routes in the application with their path and name.
    """
    url_list = [{"path": route.path, "name": route.name}
                for route in app.routes]
    return url_list
